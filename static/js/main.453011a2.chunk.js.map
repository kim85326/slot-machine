{"version":3,"sources":["Slot.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Slot","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentDeg","width","start","bind","assertThisInitialized","nextProps","config","isRunning","props","style","transform","concat","transition","durationTime","slotItems","index","items","item","itemStyle","getItemRotate","getItemTranslateZ","push","react_default","a","createElement","key","className","length","Math","tan","PI","_this2","randomDeg","random","setState","setTimeout","stop","getStyle","getSlotItems","Component","App","startGame","slotConfigs","isHandlerActive","JSON","parse","stringify","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","slots","src_Slot_0","getSlots","getHandlerActiveClassName","onClick","disabled","getIsRunning","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.453011a2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Slot.css\";\r\n\r\nclass Slot extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      currentDeg: 0,\r\n      width: 150\r\n    };\r\n    this.start = this.start.bind(this);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.config.isRunning && !this.props.config.isRunning) {\r\n      this.start();\r\n    }\r\n  }\r\n\r\n  getStyle() {\r\n    const style = {\r\n      transform: `rotateX(${this.state.currentDeg}deg)`\r\n    };\r\n\r\n    if (this.props.config.isRunning) {\r\n      style.transition = `${this.props.config.durationTime}ms ease-in-out`;\r\n    }\r\n\r\n    return style;\r\n  }\r\n\r\n  getSlotItems() {\r\n    const slotItems = [];\r\n\r\n    for (const index in this.props.config.items) {\r\n      const item = this.props.config.items[index];\r\n      const itemStyle = {\r\n        width: `${this.state.width}px`,\r\n        transform: `rotateX(${this.getItemRotate() * index}deg)\r\n          translateZ(${this.getItemTranslateZ()}px)`\r\n      };\r\n\r\n      slotItems.push(\r\n        <div key={index} className=\"slot-item\" style={itemStyle}>\r\n          {item}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return slotItems;\r\n  }\r\n\r\n  getItemRotate() {\r\n    return 360 / this.props.config.items.length;\r\n  }\r\n\r\n  getItemTranslateZ() {\r\n    return (\r\n      this.state.width /\r\n      2 /\r\n      Math.tan((this.getItemRotate() / 2 / 180) * Math.PI)\r\n    );\r\n  }\r\n\r\n  start() {\r\n    // 取得隨機角度(預設至少跑5圈)\r\n    let randomDeg = Math.random() * 360 + 360 * 5;\r\n    randomDeg -= randomDeg % this.getItemRotate(); // 減去餘數，避免有高低不一的狀況\r\n    this.setState({\r\n      currentDeg: -randomDeg\r\n    });\r\n    setTimeout(() => {\r\n      this.stop();\r\n    }, this.props.config.durationTime);\r\n  }\r\n\r\n  stop() {\r\n    // 把結束時的角度設定為當前角度\r\n    const currentDeg = this.state.currentDeg % 360;\r\n    this.setState(\r\n      {\r\n        currentDeg: currentDeg\r\n      },\r\n      this.props.stop\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"slot\" style={this.getStyle()}>\r\n        {this.getSlotItems()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Slot;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Slot from \"./Slot\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.startGame = this.startGame.bind(this);\n    this.state = {\n      slotConfigs: [\n        {\n          isRunning: false,\n          durationTime: 4000,\n          items: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        },\n        {\n          isRunning: false,\n          durationTime: 5000,\n          items: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        },\n        {\n          isRunning: false,\n          durationTime: 6000,\n          items: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        }\n      ],\n      isHandlerActive: false\n    };\n  }\n\n  startGame() {\n    const { slotConfigs } = JSON.parse(JSON.stringify(this.state));\n\n    for (const config of slotConfigs) {\n      config.isRunning = true;\n    }\n\n    this.setState({\n      slotConfigs: slotConfigs,\n      isHandlerActive: true\n    });\n\n    setTimeout(() => {\n      this.setState({\n        isHandlerActive: false\n      });\n    }, 500);\n  }\n\n  stop(index) {\n    const { slotConfigs } = JSON.parse(JSON.stringify(this.state));\n\n    slotConfigs[index].isRunning = false;\n\n    this.setState({\n      slotConfigs: slotConfigs\n    });\n  }\n\n  getIsRunning() {\n    for (const config of this.state.slotConfigs) {\n      if (config.isRunning === true) return true;\n    }\n\n    return false;\n  }\n\n  getSlots() {\n    const slots = [];\n\n    for (const index in this.state.slotConfigs) {\n      const config = this.state.slotConfigs[index];\n      slots.push(\n        <Slot key={index} config={config} stop={this.stop.bind(this, index)} />\n      );\n    }\n\n    return slots;\n  }\n\n  getHandlerActiveClassName() {\n    if (this.state.isHandlerActive) {\n      return \" active\";\n    }\n    return \"\";\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"slot-machine\">\n          <h1 className=\"slot-machine-header\">Slot Machine</h1>\n          <div className=\"slot-machine-body\">\n            <div className=\"screen\">{this.getSlots()}</div>\n          </div>\n          <div className={`handler${this.getHandlerActiveClassName()}`}>\n            <div className=\"horizontal-stick\" />\n            <div className=\"vertical-stick\" />\n            <button\n              className=\"ball\"\n              onClick={this.startGame}\n              disabled={this.getIsRunning()}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}